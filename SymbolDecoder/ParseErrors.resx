<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BadSymbolStart" xml:space="preserve">
    <value>Valid symbol names start with '?', not '{0}'</value>
  </data>
  <data name="DoubleReference" xml:space="preserve">
    <value>Expected non-reference type</value>
  </data>
  <data name="EmptyName" xml:space="preserve">
    <value>Name fragments cannot empty</value>
  </data>
  <data name="EmptyParameterList" xml:space="preserve">
    <value>Expected at least one parameter type for function</value>
  </data>
  <data name="ExpectedReturnType" xml:space="preserve">
    <value>Expected function return type</value>
  </data>
  <data name="ExpectedTemplateName" xml:space="preserve">
    <value>Expected template name</value>
  </data>
  <data name="InvalidBackRef" xml:space="preserve">
    <value>Invalid back reference {0}</value>
  </data>
  <data name="InvalidBasedPointerType" xml:space="preserve">
    <value>Invalid __based pointer code '{0}'</value>
  </data>
  <data name="InvalidCallingConvention" xml:space="preserve">
    <value>Invalid function call convention code '{0}'</value>
  </data>
  <data name="InvalidCharacter" xml:space="preserve">
    <value>Invalid character encountered in symbol '{0}'</value>
  </data>
  <data name="InvalidDataEncoding" xml:space="preserve">
    <value>Invalid data symbol code '{0}'</value>
  </data>
  <data name="InvalidDimension" xml:space="preserve">
    <value>Invalid character in integer encoding:'{0}'</value>
  </data>
  <data name="InvalidEnumType" xml:space="preserve">
    <value>Invalid enum base type code '{0}'</value>
  </data>
  <data name="InvalidExtendedTypeCode" xml:space="preserve">
    <value>Invalid extended type code '{0}'</value>
  </data>
  <data name="InvalidFunctionClass" xml:space="preserve">
    <value>Invalid function class code '{0}'</value>
  </data>
  <data name="InvalidFunctionStorage" xml:space="preserve">
    <value>Invalid function storage code {0}</value>
  </data>
  <data name="InvalidIdentifierChar" xml:space="preserve">
    <value>Invalid character in identifier '{0}'</value>
  </data>
  <data name="InvalidRttiCode" xml:space="preserve">
    <value>Invalid RTTI code '{0}'</value>
  </data>
  <data name="InvalidSpecialNameCode" xml:space="preserve">
    <value>Invalid special name code '{0}'</value>
  </data>
  <data name="InvalidStorageClass" xml:space="preserve">
    <value>Invalid storage class code '{0}'</value>
  </data>
  <data name="InvalidStorageModifierForNonPointer" xml:space="preserve">
    <value>Pointer storage modifiers can only be applied to pointers</value>
  </data>
  <data name="InvalidSymbolTypeCode" xml:space="preserve">
    <value>Invalid symbol type '{0}'</value>
  </data>
  <data name="InvalidTemplateArgument" xml:space="preserve">
    <value>Invalid template argument code:'{0}'</value>
  </data>
  <data name="InvalidTemplateConst" xml:space="preserve">
    <value>Invalid template constant argument code:'{0}'</value>
  </data>
  <data name="InvalidTypeEncoding" xml:space="preserve">
    <value>Invalid type code '{0}'</value>
  </data>
  <data name="NonsenseAtEndOfSymbol" xml:space="preserve">
    <value>Extraneous characters encountered after decoded symbol</value>
  </data>
  <data name="PrematureEndOfSymbol" xml:space="preserve">
    <value>The end of the symbol was encountered before decoding was complete</value>
  </data>
  <data name="SymbolParseErrorFormat" xml:space="preserve">
    <value>Invalid Symbol: {0}
{1} @ {2}</value>
    <comment>Format used for symbol name parse erors. Substititions are overall message, the invalid symbol, parse error and character position</comment>
  </data>
  <data name="TruncatedSymbol" xml:space="preserve">
    <value>Unable to decode truncated symbol</value>
  </data>
  <data name="UnexpectedCharacter" xml:space="preserve">
    <value>Unexpected character '{0}'</value>
  </data>
  <data name="UnimplementedInterfaceQualifier" xml:space="preserve">
    <value>Interface qualifer type '{0}' is not implemented yet</value>
  </data>
  <data name="UnterminatedFunction" xml:space="preserve">
    <value>Unterminated function symbol; expecting 'Z'</value>
  </data>
  <data name="UnterminatedName" xml:space="preserve">
    <value>Unterminated identifier; expected '@'</value>
  </data>
  <data name="UnterminatedParameterList" xml:space="preserve">
    <value>Unterminated function parameter list; expected '@', 'X' or 'Z'</value>
  </data>
  <data name="UnterminatedQualifiedName" xml:space="preserve">
    <value>Unterminated qualified name expected '@'</value>
  </data>
  <data name="UnterminatedTemplateParameterList" xml:space="preserve">
    <value>Unterminated template parameter list; expected '@'</value>
  </data>
  <data name="UnusedExtendedTypeCode" xml:space="preserve">
    <value>Unused extended type code '{0}'</value>
  </data>
  <data name="UnusedTypeCode" xml:space="preserve">
    <value>Unused type code '{0}'</value>
  </data>
</root>